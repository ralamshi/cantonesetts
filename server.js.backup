const express = require('express');
const cors = require('cors');
const path = require('path');
const { GoogleTTSClient } = require('./services/providers/googleTTS');
const { MicrosoftTTSClient } = require('./services/providers/microsoftTTS');
const { TranslateService } = require('./services/translateService');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// 初始化所有服務
const googleTTS = new GoogleTTSClient();
const microsoftTTS = new MicrosoftTTSClient();
const translateService = new TranslateService();

// 中間件
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(express.static(path.join(__dirname, 'public')));

// 請求日誌中間件
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path} - ${req.ip}`);
    next();
});

// 健康檢查
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV || 'development',
        services: {
            googleTTS: googleTTS.client ? 'Ready' : 'Not configured',
            microsoftTTS: microsoftTTS.isConfigured ? 'Ready' : 'Not configured',
            translateService: translateService.isConfigured ? 'Ready' : 'Not configured'
        },
        uptime: process.uptime(),
        memory: process.memoryUsage()
    });
});

// Favicon 處理
app.get('/favicon.ico', (req, res) => {
    res.status(204).end();
});

// 語音合成 API
app.post('/api/v1/synthesize', async (req, res) => {
    try {
        const {
            text,
            engine = 'google',
            voice = 'yue-HK-Standard-A',
            language = 'yue',
            rate = 1.0,
            pitch = 0.0,
            volume = 1.0
        } = req.body;

        // 驗證輸入
        if (!text || text.trim().length === 0) {
            return res.status(400).json({
                success: false,
                message: '請輸入要朗讀的文字',
                code: 'EMPTY_TEXT'
            });
        }

        if (text.length > 5000) {
            return res.status(400).json({
                success: false,
                message: '文字長度不能超過 5000 字符',
                code: 'TEXT_TOO_LONG'
            });
        }

        // 清理和準備文字
        const cleanText = text.trim();
        
        console.log(`🎤 TTS 請求: ${engine} | ${language} | ${voice} | "${cleanText.substring(0, 50)}${cleanText.length > 50 ? '...' : ''}"`);

        let audioContent;
        const startTime = Date.now();
        
        // 根據引擎選擇 TTS 服務
        if (engine === 'microsoft') {
            if (!microsoftTTS.isConfigured) {
                return res.status(503).json({
                    success: false,
                    message: 'Microsoft Azure TTS 服務未配置',
                    code: 'AZURE_NOT_CONFIGURED'
                });
            }
            
            audioContent = await microsoftTTS.synthesize({
                text: cleanText,
                voice,
                language,
                rate: parseFloat(rate),
                pitch: parseFloat(pitch),
                volume: parseFloat(volume)
            });
        } else if (engine === 'openai') {
            // 預留 OpenAI TTS 支援
            return res.status(501).json({
                success: false,
                message: 'OpenAI TTS 功能開發中',
                code: 'OPENAI_NOT_IMPLEMENTED'
            });
        } else {
            // 默認使用 Google TTS
            if (!googleTTS.client) {
                return res.status(503).json({
                    success: false,
                    message: 'Google Cloud TTS 服務未配置',
                    code: 'GOOGLE_NOT_CONFIGURED'
                });
            }
            
            audioContent = await googleTTS.synthesize({
                text: cleanText,
                voice,
                language,
                rate: parseFloat(rate),
                pitch: parseFloat(pitch),
                volume: parseFloat(volume)
            });
        }

        const processingTime = Date.now() - startTime;

        res.json({
            success: true,
            audioContent,
            metadata: {
                engine,
                voice,
                language,
                textLength: cleanText.length,
                processingTime: `${processingTime}ms`,
                timestamp: new Date().toISOString(),
                audioFormat: 'mp3',
                audioSize: Math.round(audioContent.length * 0.75) // 估算字節大小
            }
        });

    } catch (error) {
        console.error('❌ TTS API 錯誤:', error);
        
        // 詳細錯誤處理
        let errorMessage = error.message || '語音合成失敗';
        let errorCode = 'TTS_ERROR';
        
        if (error.message.includes('INVALID_ARGUMENT')) {
            errorMessage = '語音參數無效，請檢查語音選擇';
            errorCode = 'INVALID_VOICE';
        } else if (error.message.includes('UNAUTHENTICATED')) {
            errorMessage = 'API 認證失敗，請檢查配置';
            errorCode = 'AUTH_ERROR';
        } else if (error.message.includes('QUOTA_EXCEEDED')) {
            errorMessage = 'API 配額已用完，請稍後再試';
            errorCode = 'QUOTA_EXCEEDED';
        }

        res.status(500).json({
            success: false,
            message: errorMessage,
            code: errorCode,
            debug: process.env.NODE_ENV === 'development' ? {
                stack: error.stack,
                details: error.message
            } : undefined
        });
    }
});

// 翻譯 API
app.post('/api/v1/translate', async (req, res) => {
    try {
        const { text, from, to } = req.body;

        // 驗證輸入
        if (!text || text.trim().length === 0) {
            return res.status(400).json({
                success: false,
                message: '請輸入要翻譯的文字',
                code: 'EMPTY_TEXT'
            });
        }

        if (text.length > 5000) {
            return res.status(400).json({
                success: false,
                message: '文字長度不能超過 5000 字符',
                code: 'TEXT_TOO_LONG'
            });
        }

        if (!from || !to) {
            return res.status(400).json({
                success: false,
                message: '請指定翻譯語言',
                code: 'MISSING_LANGUAGES'
            });
        }

        // 如果源語言和目標語言相同，直接返回原文
        if (from === to) {
            return res.json({
                success: true,
                translatedText: text.trim(),
                originalText: text.trim(),
                from,
                to,
                isSameLanguage: true,
                timestamp: new Date().toISOString()
            });
        }

        const cleanText = text.trim();
        console.log(`🌐 翻譯請求: ${from} -> ${to} | "${cleanText.substring(0, 50)}${cleanText.length > 50 ? '...' : ''}"`);

        const startTime = Date.now();
        const translatedText = await translateService.translateText(cleanText, from, to);
        const processingTime = Date.now() - startTime;

        res.json({
            success: true,
            translatedText,
            originalText: cleanText,
            from,
            to,
            processingTime: `${processingTime}ms`,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('❌ 翻譯 API 錯誤:', error);
        res.status(500).json({
            success: false,
            message: error.message || '翻譯失敗',
            code: 'TRANSLATE_ERROR',
            debug: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
});

// 語音列表 API
app.get('/api/v1/voices', async (req, res) => {
    const { engine = 'google', language = 'yue' } = req.query;
    
    try {
        let voices = [];
        
        if (engine === 'microsoft') {
            if (!microsoftTTS.isConfigured) {
                return res.status(503).json({
                    success: false,
                    message: 'Microsoft Azure TTS 服務未配置',
                    code: 'AZURE_NOT_CONFIGURED'
                });
            }
            voices = await microsoftTTS.getVoices(language);
        } else if (engine === 'openai') {
            // 預留 OpenAI 語音列表
            voices = [];
        } else {
            // Google 語音（從固定列表）
            const googleVoices = {
                yue: [
                    { id: 'yue-HK-Standard-A', name: '曉美', gender: 'female' },
                    { id: 'yue-HK-Standard-B', name: '家明', gender: 'male' },
                    { id: 'yue-HK-Standard-C', name: '小晴', gender: 'female' },
                    { id: 'yue-HK-Standard-D', name: '阿仔', gender: 'male' }
                ],
                en: [
                    { id: 'en-US-Standard-C', name: 'Emma', gender: 'female' },
                    { id: 'en-US-Standard-A', name: 'James', gender: 'male' },
                    { id: 'en-US-Standard-E', name: 'Sophie', gender: 'female' },
                    { id: 'en-US-Standard-D', name: 'David', gender: 'male' }
                ],
                ja: [
                    { id: 'ja-JP-Standard-A', name: '麻衣', gender: 'female' },
                    { id: 'ja-JP-Standard-C', name: '太郎', gender: 'male' }
                ],
                ko: [
                    { id: 'ko-KR-Standard-A', name: '지은', gender: 'female' },
                    { id: 'ko-KR-Standard-C', name: '민수', gender: 'male' }
                ],
                de: [
                    { id: 'de-DE-Standard-G', name: 'Anna', gender: 'female' },
                    { id: 'de-DE-Standard-H', name: 'Hans', gender: 'male' }
                ]
            };
            voices = googleVoices[language] || [];
        }
        
        res.json({
            success: true,
            voices,
            engine,
            language,
            count: voices.length,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('❌ 語音列表 API 錯誤:', error);
        res.status(500).json({
            success: false,
            message: error.message || '獲取語音列表失敗',
            code: 'VOICES_ERROR'
        });
    }
});

// 測試 Google Cloud 配置
app.post('/api/v1/test-google', (req, res) => {
    try {
        if (!process.env.GOOGLE_SERVICE_ACCOUNT_KEY) {
            return res.status(400).json({
                success: false,
                message: 'Google 服務帳戶金鑰未配置',
                code: 'MISSING_GOOGLE_KEY'
            });
        }

        const credentials = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_KEY);
        
        res.json({
            success: true,
            message: 'Google Cloud 配置正常',
            projectId: credentials.project_id,
            clientEmail: credentials.client_email,
            hasPrivateKey: !!credentials.private_key,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('❌ Google 配置測試錯誤:', error);
        res.status(500).json({
            success: false,
            message: 'Google Cloud 配置錯誤',
            code: 'GOOGLE_CONFIG_ERROR',
            error: error.message
        });
    }
});

// 測試 Azure 配置
app.post('/api/v1/test-azure', async (req, res) => {
    try {
        if (!microsoftTTS.isConfigured) {
            return res.status(400).json({
                success: false,
                message: 'Azure 語音服務未配置',
                code: 'AZURE_NOT_CONFIGURED',
                details: {
                    hasKey: !!process.env.AZURE_SPEECH_KEY,
                    hasRegion: !!process.env.AZURE_SPEECH_REGION,
                    region: process.env.AZURE_SPEECH_REGION || 'not set'
                }
            });
        }

        // 測試獲取 token
        const startTime = Date.now();
        await microsoftTTS.getAccessToken();
        const processingTime = Date.now() - startTime;
        
        res.json({
            success: true,
            message: 'Microsoft Azure TTS 配置正常',
            region: microsoftTTS.region,
            tokenUrl: microsoftTTS.tokenUrl,
            ttsUrl: microsoftTTS.ttsUrl,
            processingTime: `${processingTime}ms`,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('❌ Azure 配置測試錯誤:', error);
        res.status(500).json({
            success: false,
            message: 'Azure TTS 配置錯誤',
            code: 'AZURE_CONFIG_ERROR',
            error: error.message,
            details: {
                region: microsoftTTS.region,
                hasKey: !!process.env.AZURE_SPEECH_KEY
            }
        });
    }
});

// 測試翻譯服務配置
app.post('/api/v1/test-translate', async (req, res) => {
    try {
        if (!translateService.isConfigured) {
            return res.status(400).json({
                success: false,
                message: '翻譯服務未配置',
                code: 'TRANSLATE_NOT_CONFIGURED'
            });
        }

        // 進行一個簡單的翻譯測試
        const testText = '你好';
        const startTime = Date.now();
        const result = await translateService.translateText(testText, 'yue', 'zh');
        const processingTime = Date.now() - startTime;
        
        res.json({
            success: true,
            message: '翻譯服務配置正常',
            testTranslation: {
                original: testText,
                translated: result,
                from: 'yue',
                to: 'zh'
            },
            processingTime: `${processingTime}ms`,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('❌ 翻譯服務測試錯誤:', error);
        res.status(500).json({
            success: false,
            message: '翻譯服務配置錯誤',
            code: 'TRANSLATE_CONFIG_ERROR',
            error: error.message
        });
    }
});

// 系統指標 API
app.get('/api/v1/metrics', (req, res) => {
    res.json({
        success: true,
        metrics: {
            uptime: process.uptime(),
            memory: process.memoryUsage(),
            cpu: process.cpuUsage(),
            nodeVersion: process.version,
            platform: process.platform,
            arch: process.arch
        },
        services: {
            googleTTS: googleTTS.client ? 'Ready' : 'Not configured',
            microsoftTTS: microsoftTTS.isConfigured ? 'Ready' : 'Not configured',
            translateService: translateService.isConfigured ? 'Ready' : 'Not configured'
        },
        timestamp: new Date().toISOString()
    });
});

// 基本路由
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// 404 處理
app.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        message: '找不到請求的資源',
        code: 'NOT_FOUND',
        path: req.originalUrl,
        method: req.method,
        timestamp: new Date().toISOString()
    });
});

// 全局錯誤處理
app.use((error, req, res, next) => {
    console.error('💥 未處理的錯誤:', error);
    
    res.status(500).json({
        success: false,
        message: '伺服器內部錯誤',
        code: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        debug: process.env.NODE_ENV === 'development' ? {
            message: error.message,
            stack: error.stack
        } : undefined
    });
});

// 優雅關閉處理
process.on('SIGTERM', () => {
    console.log('🔄 收到 SIGTERM 信號，正在優雅關閉...');
    server.close(() => {
        console.log('✅ 伺服器已關閉');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('🔄 收到 SIGINT 信號，正在優雅關閉...');
    server.close(() => {
        console.log('✅ 伺服器已關閉');
        process.exit(0);
    });
});

// 未捕獲的異常處理
process.on('uncaughtException', (error) => {
    console.error('💀 未捕獲的異常:', error);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('💀 未處理的 Promise 拒絕:', reason);
    console.error('💀 Promise:', promise);
    process.exit(1);
});

// 啟動服務器
const server = app.listen(PORT, () => {
    console.log('\n🎉 === LoveNSay 多語言 TTS 系統已啟動 ===');
    console.log(`🚀 服務器運行在: http://localhost:${PORT}`);
    console.log(`📝 環境: ${process.env.NODE_ENV || 'development'}`);
    console.log(`🕐 啟動時間: ${new Date().toLocaleString('zh-TW')}`);
    console.log('\n📋 服務狀態:');
    console.log(`   🔧 Google TTS: ${googleTTS.client ? '✅ 準備就緒' : '❌ 未配置'}`);
    console.log(`   🔧 Microsoft TTS: ${microsoftTTS.isConfigured ? '✅ 準備就緒' : '❌ 未配置'}`);
    console.log(`   🔧 翻譯服務: ${translateService.isConfigured ? '✅ 準備就緒' : '❌ 未配置'}`);
    console.log('\n🔗 可用端點:');
    console.log(`   📊 健康檢查: http://localhost:${PORT}/health`);
    console.log(`   🎤 語音合成: POST http://localhost:${PORT}/api/v1/synthesize`);
    console.log(`   🌐 翻譯服務: POST http://localhost:${PORT}/api/v1/translate`);
    console.log(`   📋 語音列表: GET http://localhost:${PORT}/api/v1/voices`);
    console.log(`   📈 系統指標: GET http://localhost:${PORT}/api/v1/metrics`);
    console.log('=====================================\n');
});

module.exports = app;